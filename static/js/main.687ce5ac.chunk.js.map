{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","serviceWorker.js","App.js","index.js"],"names":["module","exports","Card","props","useState","isFlipped","setIsFlipped","handleClick","flipDirection","onClick","className","src","monster","id","alt","name","email","phone","address","street","suite","city","zipcode","website","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","Boolean","window","location","hostname","match","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qOAAAA,EAAOC,QAAU,IAA0B,kC,yJCM9BC,EAAO,SAACC,GAAW,IAAD,EACOC,oBAAS,GADhB,mBACpBC,EADoB,KACTC,EADS,KAErBC,EAAc,kBAAMD,GAAcD,IACxC,OACA,kBAAC,IAAD,CAAeA,UAAWA,EAAWG,cAAc,cAC/C,yBAAKC,QAASF,EAAaG,UAAU,kBACjC,yBAAKC,IAAG,+BAA0BR,EAAMS,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,gCAAMX,EAAMS,QAAQG,KAApB,KACA,+BAAKZ,EAAMS,QAAQI,QAEvB,yBAAKP,QAASF,EAAaG,UAAU,kBACjC,2BAAG,0CAAH,IAA4BP,EAAMS,QAAQK,MAA1C,KACA,2BAAG,4CAAH,IAA8Bd,EAAMS,QAAQM,QAAQC,OAApD,IACKhB,EAAMS,QAAQM,QAAQE,MAD3B,IAEKjB,EAAMS,QAAQM,QAAQG,KAF3B,IAGKlB,EAAMS,QAAQM,QAAQI,SAC3B,2BAAG,4CAAH,IAA8BnB,EAAMS,QAAQW,YCjB3CC,EAAW,SAAArB,GAAK,OAC3B,yBAAKO,UAAU,aACZP,EAAMsB,SAASC,KAAI,SAAAd,GAAO,OACzB,kBAAC,EAAD,CAAMe,IAAKf,EAAQC,GAAID,QAAUA,SCL1BgB,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIpB,UAAU,SACVqB,KAAK,SACLF,YAAaA,EACbG,SAAUF,M,MCIEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IC2BSC,E,kDApCb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXd,SAAU,GACVe,YAAa,IALJ,E,gEAUO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAErB,SAAUoB,S,+BAIjC,IAAD,SAC2BE,KAAKR,MAA/Bd,EADD,EACCA,SAAUe,EADX,EACWA,YACZQ,EAAmBvB,EAASwB,QAAO,SAAArC,GAAO,OAC9CA,EAAQG,KAAKmC,cAAcC,SAASX,EAAYU,gBAAkBtC,EAAQI,MAAMkC,cAAcC,SAASX,EAAYU,kBAGrH,OACE,yBAAKxC,UAAU,OACb,8CACA,kBAAC,EAAD,CACEmB,YAAY,kBACZC,aAAgB,SAAAsB,GACd,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE1C,kBAAC,EAAD,CAAU7B,SAAUuB,S,GAhCVO,IAAMC,WCFxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.687ce5ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import './card.styles.css';\r\n\r\nimport React from 'react'\r\nimport ReactCardFlip from 'react-card-flip'\r\nimport { useState } from \"react\";\r\n\r\nexport const Card = (props) => {\r\n    const [isFlipped, setIsFlipped] = useState(false);\r\n    const handleClick = () => setIsFlipped(!isFlipped);\r\n    return (\r\n    <ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\">\r\n        <div onClick={handleClick} className='card-container'>\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set1&size=220x180`} alt=\"monster\"/>\r\n            <h2> {props.monster.name} </h2>\r\n            <p> {props.monster.email}</p>\r\n        </div>\r\n        <div onClick={handleClick} className='card-container'>\r\n            <p><strong>Phone:</strong> {props.monster.phone} </p>\r\n            <p><strong>Address:</strong> {props.monster.address.street},\r\n                {props.monster.address.suite},\r\n                {props.monster.address.city},\r\n                {props.monster.address.zipcode}</p>\r\n            <p><strong>Website:</strong> {props.monster.website}</p>\r\n        </div>\r\n    </ReactCardFlip>\r\n);\r\n}","import './card-list.styles.css';\r\n\r\nimport { Card } from '../card/card.component'\r\nimport React from 'react';\r\n\r\nexport const CardList = props => (\r\n  <div className=\"card-list\">\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={ monster }/>\r\n    ))}\r\n  </div>\r\n);\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search' \r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    />\r\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './App.css';\r\n\r\nimport { CardList } from './components/card-list/card-list.component';\r\nimport React from 'react';\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\nimport logo from './logo.svg';\r\nimport { register } from './serviceWorker';\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: '',\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({ monsters: users }));\r\n  }\r\n\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster =>\r\n      monster.name.toLowerCase().includes(searchField.toLowerCase()) || monster.email.toLowerCase().includes(searchField.toLowerCase())\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Robots Rolodex</h1>\r\n        <SearchBox \r\n          placeholder='Search monsters' \r\n          handleChange = {e => {\r\n            this.setState({ searchField: e.target.value})}}\r\n        />\r\n        <CardList monsters={filteredMonsters}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}